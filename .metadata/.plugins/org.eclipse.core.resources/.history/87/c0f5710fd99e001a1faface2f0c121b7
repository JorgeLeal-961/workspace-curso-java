package cursojava.executavel;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.JOptionPane;

import cursojava.classes.Aluno;
import cursojava.classes.Diretor;
import cursojava.classes.Disciplina;
import cursojava.classesauxiliares.FuncaoAutenticacao;
import cursojava.constantes.StatusAluno;

public class PrimeiraClasseJava {

	/* Main é um metodo auto executavel em Java */
//	@SuppressWarnings("rawtypes")
	public static void main(String[] args) {
		
	try{
		
		File fil = new File("c://lines.txt");
		Scanner scanner = new Scanner(fil);

		String login = JOptionPane.showInputDialog("Informe o login");
		String senha = JOptionPane.showInputDialog("Informe o senha");		
				
		if (new FuncaoAutenticacao(new Diretor(login, senha)).autenticar()) {/* se TRUE acessa, se FALSE não acessa */

			List<Aluno> alunos = new ArrayList<Aluno>();

			/*
			 * É uma lista que dentro dela temos um chave que identifica uma sequencia de
			 * valores também
			 */
			HashMap<String, List<Aluno>> maps = new HashMap<String, List<Aluno>>();

			for (int qtd = 1; qtd <= 2; qtd++) {

				String nome = JOptionPane.showInputDialog("Nome do aluno:");
				Aluno aluno1 = new Aluno();

				aluno1.setNome(nome);

				for (int pos = 1; pos <= 1; pos++) {
					String nomeDisciplina = JOptionPane.showInputDialog("Informe Disciplina: " + pos + " ?");
					String notaDisciplina = JOptionPane.showInputDialog("Informe Nota: " + pos + " ?");

					Disciplina disciplina = new Disciplina();
					disciplina.setDisciplina(nomeDisciplina);
					disciplina.setNota(Double.valueOf(notaDisciplina));

					aluno1.getDisciplinas().add(disciplina);
				}

				int escolha = JOptionPane.showConfirmDialog(null, "Deseja remover alguma disciplina?");

				if (escolha == 0) {// Opção SIM é zero

					int continuarRemover = 0;
					int posicao = 1;

					while (continuarRemover == 0) {
						String disciplinaRemover = JOptionPane.showInputDialog("Qual a disciplina: 1,2,3 ou 4?");
						aluno1.getDisciplinas().remove(Integer.valueOf(disciplinaRemover).intValue() - posicao);
						posicao++;
						continuarRemover = JOptionPane.showConfirmDialog(null, "Continuar a remover?");
					}
				}

				alunos.add(aluno1);

			}

			maps.put(StatusAluno.APROVADO, new ArrayList<Aluno>());
			maps.put(StatusAluno.RECUPERACAO, new ArrayList<Aluno>());
			maps.put(StatusAluno.REPROVADO, new ArrayList<Aluno>());

			for (Aluno aluno : alunos) {
				if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.APROVADO)) {
					maps.get(StatusAluno.APROVADO).add(aluno);
					// alunosAprovados.add(aluno);
				} else if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.RECUPERACAO)) {
					maps.get(StatusAluno.RECUPERACAO).add(aluno);
					// alunosRecuperacao.add(aluno);
				} else if (aluno.getAlunoAprovado2().equalsIgnoreCase(StatusAluno.REPROVADO)) {
					maps.get(StatusAluno.REPROVADO).add(aluno);
					// alunosReprovados.add(aluno);
				}
			}

			System.out.println("-------------------- Lista dos Aprovados --------------------");
			for (Aluno aluno : maps.get(StatusAluno.APROVADO)) {// (Aluno aluno : alunosAprovados) {
				System.out.println("Resultado = " + aluno.getAlunoAprovado2() + " com media = " + aluno.getMediaNota());
			}
			System.out.println("-------------------- Lista dos Em Recuperação --------------------");
			for (Aluno aluno : maps.get(StatusAluno.RECUPERACAO)) {// (Aluno aluno : alunosRecuperacao) {
				System.out.println("Resultado = " + aluno.getAlunoAprovado2() + " com media = " + aluno.getMediaNota());
			}
			System.out.println("-------------------- Lista dos Reprovados --------------------");
			for (Aluno aluno : maps.get(StatusAluno.REPROVADO)) {// (Aluno aluno : alunosReprovados) {
				System.out.println("Resultado = " + aluno.getAlunoAprovado2() + " com media = " + aluno.getMediaNota());
			}
		}
		else {
			
			JOptionPane.showMessageDialog(null, "Acesso não permitido");
			
		}
		
		
	}catch (NumberFormatException e) {
		
		StringBuilder saida = new StringBuilder();
				
		e.printStackTrace();/*Imprime erro no console Java*/
		/*Mensagem do erro ou causa*/
		System.out.println("Mensagem: "+ e.getMessage());
		
		for(int pos = 0; pos < e.getStackTrace().length; pos++) {
			saida.append("\n Classe de erro: " +e.getStackTrace()[pos].getClassName());
			saida.append("\n Metodo de erro: " +e.getStackTrace()[pos].getMethodName());
			saida.append("\n Linha de erro: " +e.getStackTrace()[pos].getLineNumber());
			saida.append("\n Linha de erro: " +e.getStackTrace()[pos].getLineNumber());
			saida.append("\n Linha de erro: " +e.getClass().getName());
		}
		
		JOptionPane.showMessageDialog(null, "Erro ao processar alguma coisa: "+ saida.toString());
	}catch (NullPointerException e) {
		JOptionPane.showMessageDialog(null, "Opaa um null pointer exception: "+ e.getClass());
		
	}catch(Exception e) {
		e.printStackTrace();/*Imprime erro no console Java*/
		JOptionPane.showMessageDialog(null, "Erro inesperado : "+e.getClass().getName());
	}finally {/*Sempre é executado ocorrendo erros ou não*/
		JOptionPane.showMessageDialog(null, "Obrigado por aprender Java comigo ");
	}
	
		
	
	}

}
